 
/* Check there is ot already similar functinality in GOV.UK Frontend */

@mixin defra-visually-hidden() {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    margin: 0 !important;
    padding: 0 !important;
    overflow: hidden !important;
    clip: rect(0 0 0 0) !important;
    -webkit-clip-path: inset(50%) !important;
    clip-path: inset(50%) !important;
    border: 0 !important;
    white-space: nowrap !important;
}

@mixin high-contrast-mode-only() {
    @media
    screen and (forced-colors: active),
    screen and (-ms-high-contrast: active)
    {
        @content
    }
}


//
// Function to create an optimized svg url
// Version: 1.0.6
// https://codepen.io/jakob-e/
// https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
@function svg-url($svg){
    //
    // Add missing namespace
    //
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    // Chunk up string in order to avoid
    // "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        // Encode
        //
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        //
        // The maybe list
        //
        // Keep size and compile time down
        // ... only add on documented fail
        //
        // $chunk: str-replace($chunk, '&', '%26');
        // $chunk: str-replace($chunk, '|', '%7C');
        // $chunk: str-replace($chunk, '[', '%5B');
        // $chunk: str-replace($chunk, ']', '%5D');
        // $chunk: str-replace($chunk, '^', '%5E');
        // $chunk: str-replace($chunk, '`', '%60');
        // $chunk: str-replace($chunk, ';', '%3B');
        // $chunk: str-replace($chunk, '?', '%3F');
        // $chunk: str-replace($chunk, ':', '%3A');
        // $chunk: str-replace($chunk, '@', '%40');
        // $chunk: str-replace($chunk, '=', '%3D');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}
// Background svg mixin
@mixin background-svg($svg){
    background-image: svg-url($svg);
}
// Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
    str-slice($string, 1, $index - 1) + $replace +
    str-replace(str-slice($string, $index +
    str-length($search)), $search, $replace),
    $string);
}

// Map specific mixins
@mixin focus($glow: 8px, $strong: 5px, $background: 2px, $inset: 0px) {
    position:absolute;
    content:'';
    left:5px;
    right:5px;
    top:5px;
    bottom:5px;
    box-shadow:
        0px 0px 0px $background white,
        inset 0px 0px 0px $inset govuk-colour('black'),
        0px 0px 0px $strong govuk-colour('black'),
        0px 0px 0px $glow $govuk-focus-colour;
    outline: 3px solid transparent;
    pointer-events: none;
    z-index: 99;
}
