'use strict'

const Lab = require('@hapi/lab')
const { expect } = require('@hapi/code')
const { describe, it } = exports.lab = Lab.script()
const location = require('../../server/services/location')

// Generated by ChatGPT as a sample of 100 English villages
// commented out villages are failures and appear in the sad path
// lists below
const villages = [
  'Abbotsbury',
  'Alfriston',
  'Amberley',
  'Appledore',
  'Ashwell',
  'Braithwaite',
  'Broadway',
  'Buckfastleigh',
  'Castle Combe',
  'Chipping Campden',
  'Clovelly',
  'Cranborne',
  'Craster',
  'Dedham',
  'Dittisham',
  'Dunster',
  'East Dean',
  'Ebrington',
  'Elterwater',
  'Exbury',
  'Fingest',
  'Finchingfield',
  'Fordwich',
  'Grasmere',
  'Great Tew',
  'Hathersage',
  'Hawkshead',
  'Hever',
  'Heyshott',
  'Hinton St George',
  'Holme-next-the-Sea',
  // 'Hoxne',
  'Icklesham',
  'Ilmington',
  'Kersey',
  'Kingswear',
  'Lacock',
  'Langton Herring',
  'Lechlade',
  // 'Little Moreton',
  'Lustleigh',
  'Lympstone',
  'Malham',
  'Marsden',
  'Mevagissey',
  'Monyash',
  'Mousehole',
  'Nether Stowey',
  'Norham',
  'Nunney',
  'Orford',
  'Overbury',
  'Polperro',
  'Porlock',
  'Ravenglass',
  'Robin Hoodâ€™s Bay',
  'Rye',
  'Selworthy',
  'Shere',
  // 'Slad',
  'Snowshill',
  'Southwold',
  'St Mawes',
  'Staithes',
  'Stanton',
  'Steeple Ashton',
  // 'Stoke Gabriel',
  'Stow-on-the-Wold',
  'Swanton Morley',
  'Symondsbury',
  'Taddington',
  'Tatsfield',
  'Thornton-le-Dale',
  'Tintagel',
  'Tissington',
  'Turville',
  'Upper Slaughter',
  'Warkworth',
  'Watermillock',
  'West Hoathly',
  'West Wycombe',
  'Widecombe-in-the-Moor',
  'Winchelsea',
  'Windsor',
  'Wooler',
  'Woolpit',
  'Wrotham',
  'Wycoller',
  'Yalding',
  'Yealmpton',
  'Yoxford'
]

// Generated by ChatGPT as a sample of 100 English towns
const towns = [
  'Alnwick',
  'Amersham',
  'Andover',
  'Ashbourne',
  'Ashby-de-la-Zouch',
  'Atherstone',
  'Bakewell',
  'Banbury',
  'Basingstoke',
  'Beverley',
  'Bishop\'s Stortford',
  'Bodmin',
  'Boston',
  'Bridgnorth',
  'Bridport',
  'Brigg',
  'Brixham',
  'Bude',
  'Burford',
  'Burnham-on-Sea',
  'Calne',
  'Cannock',
  'Chesham',
  'Chesterfield',
  'Chippenham',
  'Cirencester',
  'Clitheroe',
  'Congleton',
  'Corby',
  'Corsham',
  'Crediton',
  'Crewkerne',
  'Daventry',
  'Deal',
  'Dereham',
  'Devizes',
  'Didcot',
  'Diss',
  'Dorchester',
  'Dorking',
  'Dover',
  'Easingwold',
  'Evesham',
  'Fakenham',
  'Farnham',
  'Fleet',
  'Gainsborough',
  'Garstang',
  'Godalming',
  'Grantham',
  'Grays',
  'Halesowen',
  'Harlow',
  'Harpenden',
  'Helston',
  'Hertford',
  'Hexham',
  'Hitchin',
  'Honiton',
  'Hungerford',
  'Ilkeston',
  'Kendal',
  'Kenilworth',
  'Keswick',
  'Kidderminster',
  'Kirkby Lonsdale',
  'Knutsford',
  'Leek',
  'Liskeard',
  'Louth',
  'Lutterworth',
  'Malton',
  'Malvern',
  'Market Harborough',
  'Market Rasen',
  'Marlborough',
  'Melton Mowbray',
  'Midhurst',
  'Morpeth',
  'Nantwich',
  'Newark-on-Trent',
  'Newbury',
  'Newmarket',
  'Northallerton',
  'Oakham',
  'Okehampton',
  'Penrith',
  'Pershore',
  'Pickering',
  'Retford',
  'Richmond, North Yorkshire',
  'Ringwood',
  'Ripon',
  'Ross-on-Wye',
  'Saffron Walden',
  'Sandbach',
  'Shepton Mallet',
  'St Ives, Cornwall',
  'Stone',
  'Wetherby'
]

// These are towns where searching by the name doesn't
// return a high confidence UK location
const unknownPlaces = [
  'Little Moreton',
  'Slad',
  'Totnes'
]

// These are towns where searching by the Bing qualified name doesn't
// return a high confidence location which matches the Bing name
const brokenPlaces = [
  'Dartington', // => Dartington, Totnes, Devon => none
  'Kington', // => Kington, County of Herefordshire => none
  'Stoke Gabriel' // => Stoke Gabriel, Totnes, Devon => none
]

// These are towns where searching by the Bing qualified name
// returns a different high confidence location which doesn't match
// the Bing name
const brokenPlaces2 = [
  'Hoxne' // => Hoxne, Eye, Suffolk => Suffolk
]

async function resultCheck (town) {
  const result1 = await location.find(town)
  expect(result1.length, `No match found for ${town}`).to.be.greaterThan(0)
  const result2 = await location.get(result1[0].slug)
  expect(result2.length, `No match found when searching by qualified name (${result1[0].name})`).to.equal(1)
  expect(result1[0].name).to.equal(result2[0].name)
}

// These tests document known issues with bing search and, as such, they will
// will hit bing and the sad path tests will fail (hence the use of skip)
describe.skip('location service integration tests', () => {
  // Helper function to dynamically generate tests
  const generateTests = (places, description) => {
    describe(description, () => {
      places.forEach(place => {
        it(`should find result for place ${place}`, async () => {
          await resultCheck(place)
        })
      })
    })
  }

  describe('Happy path', () => {
    generateTests(villages, 'Villages: Searching by found name returns the same location')
    generateTests(towns, 'Towns: Searching by found name returns the same location')
  })

  describe('Sad path: known Bing issues', () => {
    generateTests(unknownPlaces, 'Searching by name finds no location')
    generateTests(brokenPlaces, 'Searching by found name returns no location')
    generateTests(brokenPlaces2, 'Searching by found name returns different location')
  })
})
